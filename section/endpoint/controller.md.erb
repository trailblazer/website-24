  Controller
    ctx {} config bla
    #invoke

  Protocol layer




<%= h2 "Controller" %>

The layer helping you in controllers provides the canonical invoke via the `#invoke` method, and offers a super simple and customizable DSL to configure injected options.

<%= h3 "Installation" %>

Include the `Controller` module into your `ApplicationController` to use the endpoint controller layer across your app.

<%= code "application-controller", zoom: "include" %>

Your controller and all subclasses are now ready to configure and run endpoints.

<%= h3 "Invoke" %>

To use the [canonical invoke](#endpoint-canonical-invoke) along with all its mechanics, use the `#invoke` method in your controller actions. It will automatically inject the well-defined options for each operation call, and accepts an optional block to handle different outcomes.

<%= code "controller", zoom: "create" %>

In the example above, input for the operation, such as `:params`, needs to be handed manually into `#invoke`.

Also, every possible outcome has to be defined by hand in the matcher block, cluttering the simple controller action with verbose code.

However, it's actually very simple to move the reappearing options and matchers one level up using the [configuration DSL](#endpoint-controller-configuration).

<%= h3 "Configuration" %>

You can predefine endpoint-specific options within the `endpoint` block of every controller. Usually, that would be done on the `ApplicationController` level.

<%= code :ruby do %>
class ApplicationController < ActionController::Base
  include Trailblazer::Endpoint::Controller.module

  endpoint do
    ctx do
      # ...
    end

    default_matcher do
      # ...
    end

    flow_options do
      # ...
    end
  end
<% end %>

The various directives are discussed in the following sections.

<%= h4 "ctx" %>

Use the `ctx` block to define what ctx variables always get passed into the operation invocation.

<%= code "b-endpoint-dsl", zoom: "ctx" %>

Note that you have access to `:controller` and `:activity` as block keyword arguments. Any number of ctx variables may be added, such as the `current_user`.

Now, the controller action doesn't need to pass `params` anymore.

<%= code "b-create", collapse: "skip" %>

Variables passed manually to `#invoke` are merged with the `endpoint.ctx` hash.

<%= h4 "default_matcher" %>

Using the `endpoint` DSL, you can keep controller actions lean by defining generic handlers once, on the `ApplicationController` level using the `default_matcher` block.

<%= code "b-endpoint-dsl", zoom: "default_matcher" %>

The hash defines handlers keyed by terminus names. The handler block receives the `ctx` along with keyword arguments, returned by the operation.

The block is executed in the controller context, allowing you to use its internal API, e.g. `#render` or `#head`.

With the above configuration, the controller action now only needs one matcher.

<%= code "b-create" %>

Note that a default `success` handler is overridden by the block passed to `#invoke`.

<%= h4 "Inheritance" %>

Per default, all configuration options are inherited, allowing you very lean concrete controllers that only override specific directives.

<%= code "controller", collapse: "create" %>

`MemosController` inherits all `endpoint` options from `ApplicationController` and allows overriding those.
