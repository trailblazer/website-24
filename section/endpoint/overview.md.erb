<%= gem_version "trailblazer-endpoint", "0.1.0" %>

The endpoint gem provides abstractions to invoke operations, configure injected options, and gives the invoker a matcher-like interface to deal with the outcome.

It also introduces a separate layer allowing to maintain "operations around" your actual business operation. This is called [_protocol_](#endpoint-protocol).

<%= h2 "Canonical invoke" %>

In many TRB-driven projects, developers override `Operation.call_with_public_method` to inject options and tweak the way an operation is invoked on the top-level. For example, adding ctx aliases or setting standard variables in the ctx can be achieved with a monkey-patch.

However, this patch is limited and not the recommended way to configure the invocation. With `endpoint`, we're introducing a canonical abstraction for invoking operations and activities, and customizing their options.

This has three major advantages.

1. You don't have to maintain a monkey-patch.
2. Operations and activities, in controllers, tests, tasks, or on the CLI, are all invoked with the same configuration.
3. You may use a matcher-like block to handle the outcome directly, if needed.

<%= code :ruby do %>signal, result = __(Memo::Operation::Create, params: {memo: {}}) do
  failure { |ctx, contract:, **| puts contract.errors }
end
<% end %>

TODO:
  :default_matcher
  :flow_options
  how to use in tests via trailblazer-test.

<%= h3 "Configuration" %>

In order to use the "canonical invoke", you need to define the `#__()` method (or whatever name you want) and configure its keyword arguments.

<%= code :ruby do %># config/initializers/trailblazer.to

include Trailblazer::Endpoint::Runtime::TopLevel

def __(operation, ctx, flow_options: GLOBAL_FLOW_OPTIONS, **, &block)
  super
end

# put whatever is needed here.
GLOBAL_FLOW_OPTIONS = {
  context_options: {
    aliases: {"model": :record},
    container_class: Trailblazer::Context::Container::WithAliases,
  }
}
<% end %>

Your entire application can now use `#__()` and `#__?()` to invoke operations that have set a ctx alias `:record` for `:model`.

<%= info do %>
This might change in the future as we're considering overriding `#call_with_public_interface` directly.
<% end %>


